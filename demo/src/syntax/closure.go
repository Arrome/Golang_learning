package main

func fa(a int) func(i int) int {
	return func(i int) int {
		println(&a,a)
		a = a + i
		return a
	}
}
/**
	闭包=函数+引用环境，一般通过匿名函数中引用外部函数的局部变量或包全局变量
	（闭包对闭包外的环境引入是直接引用，编译器检测到闭包，会将闭包引用的外部变量分配到堆上）

	如果函数返回的闭包引用了该函数的局部变量（参数或函数内部变量）：
	1.多次调用该函数，返回的多个闭包所引用的外部变量是多个副本（每次调用函数都会为局部变量分配内存）
	2.用一个闭包函数多次，如果该闭包修改了其引用的外部变量，则每次调用该闭包对该外部变量都有影响（闭包函数共享外部引用）

	闭包目的：减少全局变量，在函数调用过程中隐式地传递共享变量。
	缺点：隐晦不清晰，非必要，不建议使用
 */

func main() {
	f := fa(1)
	g := fa(1)
	println(f(1))
	println(f(1))
	println(g(1))
	println(g(1))
}
